module service-inventory {

    yang-version 1.1;
    namespace "https://www.turktelekom.com.tr/service-inventory";
    prefix srvc-inv;

    import ietf-inet-types {
        prefix inet;
    }
    import tailf-common {
        prefix tailf;
    }
    import tailf-ncs {
        prefix ncs;
    }

    description
      "Service inventory for multi-vendor service inventory management.";

    revision 2023-10-28 {
        description
          "Initial revision.";
    }

    typedef srvc-inv-string {
        type string {
            pattern
              '[^\s]+' {
                error-message
                  "No space/s allowed.";
            }
        }
    }

    typedef service-id-type {
        type enumeration {
            enum l2vpn;
            enum l3vpn;
        }
    }

    typedef mtu-type {
        type uint16;
    }

    typedef pw-id-type {
        type uint32;
    }

    typedef pw-encapsulation-type {
        type enumeration {
            enum ethernet;
            enum vlan;
        }
    }

    typedef customer-id-type {
        type uint32 {
            range 1..2147483647;
        }
    }

    typedef sdp-id-type {
        type uint16 {
            range 1..32767;
        }
    }

    typedef encapsulation-type {
        type enumeration {
            enum dot1q-2tags;
            enum dot1q;
            enum dot1ad;
            enum e-default;
            enum untagged;
        }
    }

    typedef vlan-id-type {
        type uint16 {
            range "2..4094";
        }
        description
          "The VLAN-ID that uniquely identifies a VLAN.  This is the 12-bit
           VLAN-ID used in the VLAN Tag header.";
        reference
          "[802.1Q]";
    }

    grouping l2vpn-grouping {
        leaf name {
            tailf:info "L2VPN Service Name";
            type srvc-inv-string;
        }

        leaf mtu {
            tailf:info "Interface/service MTU";
            type mtu-type;
        }

        leaf customer-id {
            tailf:info "Provision a Customer";
            type customer-id-type;
        }

        list endpoint {
            tailf:info "L2VPN Endpoint";

            key "device";

            leaf device {
                tailf:info "PE Device";
                type leafref {
                    path "/ncs:devices/ncs:device/ncs:name";
                }
            }

            list pe-interface {
                tailf:info "PE Device Interface";

                key "name";

                leaf name {
                    tailf:info "Interface Size.Ex GigabitEthernet | TenGigabitEthernet | FortyGigE | HundredGigE | Port-channel";
                    type string;
                }

                leaf encapsulation {
                    tailf:info "Interface Encapsulation Type";
                    type encapsulation-type;
                    default "dot1q";
                }

                leaf s-vlan-id {
                    when "../encapsulation = 'dot1ad' or ../encapsulation = 'dot1q-2tags'";
                    tailf:info "Interface Encapsulation S-Vlan Id";
                    type vlan-id-type;
                }

                leaf-list c-vlan-id {
                    when "../encapsulation = 'dot1q-2tags' or ../encapsulation = 'dot1ad' or ../encapsulation = 'dot1q'";
                    tailf:info "Interface Encapsulation C-Vlan Id";
                    type vlan-id-type;
                }
            }

            list neighbor {
                tailf:info "Specify The Peer To Cross Connect";

                key address;

                leaf address {
                    tailf:info "IP Address Of The Peer";
                    type inet:ip-address;
                }

                leaf pw-id {
                    tailf:info "Pseudowire Id";
                    type pw-id-type;
                }

                leaf pw-class {
                    tailf:info "PW Class Template Name To Use For This Pseudowire";
                    type string;
                }

                leaf encapsulation {
                    tailf:info "Specify Peer's Encapsulation Type";
                    type pw-encapsulation-type;
                }

                leaf sdp-id {
                    tailf:info "SDP Id";
                    type sdp-id-type;
                }
            }
        }
    }

    grouping device-service-inventory {
        leaf name {
            tailf:info "Device Name";
            type leafref {
                path "/ncs:devices/ncs:device/ncs:name";
            }
        }

        list interface {
            tailf:info "Device Physical Interface";

            key "if-size if-number";

            leaf if-size {
                tailf:info "Interface size.Ex GigabitEthernet | TenGigabitEthernet | FortyGigE | HundredGigE | Port-channel";
                type string;
            }

            leaf if-number {
                tailf:info "Interface id. Ex 0/0/0 | 0/0/0/0 | 1";
                type string;
            }

            list service {
                tailf:info "Inventory Service Type";

                key name;

                leaf name {
                    tailf:info "Service Type";
                    type service-id-type;
                }

                list l2vpn {
                    when "../name = 'l2vpn'";
                    tailf:info "L2VPN Device Service Inventory";
                    key name;

                    leaf name {
                        tailf:info "L2VPN Service Name";
                        type leafref {
                            path "/srvc-inv:service-inventory-manager/services/service/l2vpn/name";
                        }
                    }
                }
            }
        }
    }

    list service-inventory-manager {
        description
          "Multi-vendor service inventory management.";

        key name;
        leaf name {
            tailf:info "Service Inventory Group Name";
            type srvc-inv-string;
        }

        uses ncs:service-data;
        ncs:servicepoint service-inventory-servicepoint;

        container services {
            tailf:info "Service Inventory Manager Service Database";
            list service {
                tailf:info "Inventory Service Type";

                key name;

                leaf name {
                    tailf:info "Service Type";
                    type service-id-type;
                }

                list l2vpn {
                    when "../name = 'l2vpn'";
                    tailf:info "L2VPN Service Inventory";
                    key name;

                    uses srvc-inv:l2vpn-grouping;
                }
            }
        }

        container devices {
            tailf:info "Service Inventory Manager Device Database";
            list device {
                tailf:info "Service Inventory Device";

                key name;

                uses srvc-inv:device-service-inventory;
            }
        }

        // /////////////////////////////////////////////////////////
        // Service oob-discovery action
        // /////////////////////////////////////////////////////////
        tailf:action oob-discovery {
            tailf:actionpoint oob-discovery-point;
            input {
                leaf service {
                    tailf:info "Service Id l2vpn | l3vpn";
                    type service-id-type;
                }
            }
            output {
                leaf status {
                    type string;
                }
            }
        }
    }
}
